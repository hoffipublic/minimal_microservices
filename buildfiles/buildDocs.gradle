import org.apache.xalan.xsltc.trax.SAX2DOM
import org.ccil.cowan.tagsoup.Parser
import org.pegdown.*
import org.xhtmlrenderer.pdf.ITextRenderer
import org.xml.sax.InputSource

import java.text.SimpleDateFormat

buildscript{
    repositories {
        jcenter()
        mavenLocal()
    }

    dependencies {
        classpath 'org.pegdown:pegdown:1.6.0'
        classpath "org.ccil.cowan.tagsoup:tagsoup:1.2.1"
        classpath "org.xhtmlrenderer:core-renderer:R8"
        classpath "xalan:xalan:2.7.2"
    }
}

defaultTasks 'docs'

task docs {
    doLast {
        buildDir.mkdirs()
        FileTree tree = fileTree(dir: './docSources')
        tree.include '**/*.md'
        tree.each { File source ->
            def outputFileName = source.name.replace(".md", ".pdf")
            def docDestDir = new File("${projectDir}/docs")
            if ( ! docDestDir.exists() ) { docDestDir.mkdir() }
            def outputFile = new File("${projectDir}/docs/$outputFileName")
            def mp = new PegDownProcessor(Extensions.SMARTYPANTS + Extensions.FENCED_CODE_BLOCKS, 2000)
            def today = new SimpleDateFormat("dd.MM.yyyy").format(new java.util.Date())
            def html = new File("${projectDir}/docSources/template.html").text
            html = html.replace("{CONTENT}", mp.markdownToHtml(source.text))
            html = html.replace("{DATE}", today)
            html = html.replace("{VERSION}", project.version)
        //    new File("$buildDir/${outputFileName}.html").text = html
            //Convert from html to w3c document
            def parser = new Parser()
            def sax2dom = new SAX2DOM()
            parser.setContentHandler(sax2dom);
            parser.setFeature(Parser.namespacesFeature, false);
            parser.parse(new InputSource(new ByteArrayInputStream(html.getBytes())));
    
            //Use Document to create pdf
            ITextRenderer renderer = new ITextRenderer();
            renderer.setDocument(sax2dom.getDOM(), "file://${projectDir.absolutePath}/");
            renderer.layout();
            renderer.createPDF(outputFile.newOutputStream())
        }
    }
}
