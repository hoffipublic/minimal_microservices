// reads environments.config and provides the chosen env information (-Penv=<env>) to other tasks
//
// in master build.gradle: apply from: 'thisFileName'
// implicitly calls loadEnvDefs('environments.config') at the end of the configure(project.rootProject)
// also dealing with security sensitive configuration parameters in these which go in ${HOME}/.gradle/gradle.properties
//
// in your build.gradle you then can use e.g.: username = config.path.beyond.envvalue.username
// and in you environments.config you can use e.g.: username = project.getSecuritySensitiveProperty('cfTestUsername', '<username>')
//
configure(project) {
    // calls loadEnvDefs('environments.config') in the end
    if (project.ext.has("environmentfile")) {
        loadEnvDefs(project.ext.environmentfile)
    } else {
        loadEnvDefs("${project.rootProject.projectDir}/environments.config")
    }

    ext {
        // environments.config access helper
        getConfigProp = { key ->
            keyCategory = key.substring(0, key.indexOf('.'))
            appKey = key.substring(key.indexOf('.')+1)
            if (keyCategory == "config") {
                // strip of "config." from beginning of key
                keyCategory = key.substring("config.".length(), "config.".length() + appKey.indexOf('.'))
                appKey = key.substring("config.".length() + appKey.indexOf('.') + 1)
            }
            // println "environments.config get ${keyCategory}.${appKey}"
            if (project.config.isSet(keyCategory)) {
                cat = project.config.get(keyCategory)
                if (cat.isSet(project.name)) {
                    if (cat.get(project.name).isSet(appKey)) {
                        return cat.get(project.name).get(appKey)
                    }
                } else if (cat.isSet(project.archivesBaseName)) {
                    if (cat.get(project.archivesBaseName).isSet(appKey)) {
                        return cat.get(project.archivesBaseName).get(appKey)
                    }
                }
                if (cat.isSet(appKey)) {
                    cat.get(appKey)
                } else {
                    throw new Exception("no key '${appKey}' found under '${keyCategory}' for -Penv=${project.ext.environment} in file 'environments.config' for project '${project.name}'")
                }
            } else {
                throw new Exception("category '${keyCategory}' not found for -Penv=${project.ext.environment} in file 'environments.config' for project '${project.name}'")
            }
        }
    }
}

// loadEnvDefs('environments.config')
def loadEnvDefs(envfilename) {
    // set env on build call like: gradle -Penv=someenv clean build
    def environment = project.rootProject.hasProperty('env') ? env : 'dev'
    project.ext.set('environment', environment)
    println "Environment is set to \"$environment\" (e.g. gradle -Penv=$environment clean build)"
    def configFile = file(envfilename)
    println "loadEnvDefs reading " + configFile.toURL().toString()
    def slurper = new ConfigSlurper(environment)
    slurper.setBinding([project: project])
    def config = slurper.parse(configFile.toURL())
    // println "config read: " + config.toString()
    if(config.isEmpty()) {
        System.err.println("\nno config for \"-Penv=${environment}\" found in ${configFile.toURL().toString()}\n\n")
        System.exit(1);
    }
    project.ext.set('config', config)
    println "CF CloudController (CC) target for -Penv=$environment is $cloudfoundry.target"
}
