//project.ext.set('useGradleStep', true)

jenkins {
    servers {
        thejenkins {
            url "${project.getConfigProp('jenkins.url')}"
            username "${project.getConfigProp('jenkins.user')}"
            password "${project.getConfigProp('jenkins.pass')}"
        }
    }

    defaultServer servers.thejenkins

    jobs {
        // build jobs
        versionBranchStatusHash().each{ theBranch, branchMap ->
            "${project.archivesBaseName}_${project.ext.environment}_build_${theBranch}" {
                dsl {
                    description("this jenkins job was generated by gradle via com.terrafolio.jenkins gradle plugin\n" +
                        "All changes made via jenkins UI will be lost on next run of gradle updateJenkinsItems")

                    scm {
                        git {
                            remote {
                                url("${project.getConfigProp('git.origin')}")
                                credentials("${project.getConfigProp('git.credentials')}")
                            }
                            branch( ['master', 'develop'].contains(theBranch) ? "${theBranch}" : "${theBranch}/${branchMap['version']}" )
                        }
                    }

                    wrappers {
                        environmentVariables {
                            script("echo \"determining TheGitBranch\"\ngit rev-parse HEAD | git branch -a --contains | grep remotes | sed s:.*remotes.origin.:: > TheGitBranch.txt")

                            groovy("println \"reading: \${WORKSPACE}/TheGitBranch.txt\"\ndef tmpGitBranch = new File(\"\${WORKSPACE}/TheGitBranch.txt\").text.trim()\nprintln \"current Branch set to: \" + tmpGitBranch\n\nreturn [\n    MYVAR: \"HoffisMyVar\",\n    TheGitBranch: tmpGitBranch\n]\n")
                        }
                    }

                    // triggers {
                    //     scm('H/15 * * * *')
                    // }

                    steps {
                        // gradle {
                        //   useWrapper(true)
                        //   switches(["-Penv=dev"])
                        //   tasks(["build"])
                        // }
                        shell("./gradlew -Penv=dev clean build")
                        shell("./gradlew -Penv=dev artifactoryPublish")
                    }

                    publishers {
                        if ( ['master', 'develop', 'hotfix', 'support'].contains(theBranch) ) { // only for these branches
                            def modBranch = ['master', 'develop'].contains(theBranch) ? "${theBranch}" : "${theBranch}/${branchMap['version']}"
                            // use build-pipeline-plugin
                            // https://wiki.jenkins-ci.org/display/JENKINS/Build+Pipeline+Plugin
                            downstream("${project.archivesBaseName}_${project.ext.environment}_deploy_${modBranch}", 'SUCCESS')
                        }
                    }

                    // discard old builds:
                    logRotator(7, 9) // daysToKeep, numBuildsToKeep

                } // dsl
            }
        } // each

        // deploy jobs
        versionBranchStatusHash().each { theBranch, branchMap ->
            "${project.archivesBaseName}_${project.ext.environment}_deploy_${theBranch}" {
                dsl {
                    description("this jenkins job was generated by gradle via com.terrafolio.jenkins gradle plugin\n" +
                        "All changes made via jenkins UI will be lost on next run of gradle updateJenkinsItems")

                        def groupPath = project.rootProject.ext.group.replace('.', '/')
                        def bUrl = "${project.getConfigProp('artifactory.url')}/${project.rootProject.versionBranchStatusHash()[branch]['publishRepoKey']}"
                        def dUrl = "${bUrl}/${groupPath}/${project.archivesBaseName}/${project.rootProject.ext.version}/${project.archivesBaseName}-${project.rootProject.ext.version}.jar"

                    steps {
                        shell("curl -O -u '${project.getConfigProp('artifactory.user')}:${project.getConfigProp('artifactory.pass')}' '${dUrl}'")
                    }
                    //   publishers {
                    //       // use build-pipeline-plugin
                    //       // https://wiki.jenkins-ci.org/display/JENKINS/Build+Pipeline+Plugin
                    //       downstream("${project.ext.archiveBaseName}", 'SUCCESS')
                    //   }

                    // discard old builds:
                    logRotator(7, 9) // daysToKeep, numBuildsToKeep

                } // dsl
            }
        } // each

    } // jobs
}
