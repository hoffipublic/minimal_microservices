//
// in a multi-project build, this has to be applied from within the build.gradle.kts of the subproject
//
tasks.register("generateK8s") {
    group = "misc"
    description = "generate ytt data files and use ytt and templates in ./ytt/templates/ to generate to ./generated/"

    val env: String by project.rootProject.extra
    val archivesBaseName: String by project.extra
    val repo:  String by project.rootProject.extra
    val repoHttps: String by project.rootProject.extra

    doLast {
        val projectK8sName = archivesBaseName.toLowerCase().replace('_', '-')
        var dockerRegistry = "${spring.getEnvConfig(project.name, "environment.docker.registry")}"
        if (dockerRegistry.length == 0) {
            dockerRegistry = "\"\""
        } else {
            dockerRegistry += "/"
        }
        var dataValues =
                """
            #! generated by $ ./gradlew -Penv=<env> ${name}
            #@data/values
            #@overlay/match-child-defaults missing_ok=True
            ---
            name: ${projectK8sName}
            tier: default
            depl_labels:
              appname: ${projectK8sName}
              tier: default
            depl_matchLabels:
              appname: ${projectK8sName}
              tier: default
            depl_template_labels:
              appname: ${projectK8sName}
              tier: default
            depl_container_image: ${projectK8sName}:${v.versionNumber}
            docker_registry: ${dockerRegistry}
            spring_profiles_active: ${spring.getSpringActiveProfiles(project.name)}

            svc_enabled: true
            svc_labels:
              svc_appname: ${projectK8sName}
              tier: default
            svc_selector:
              appname: ${projectK8sName} #! same as depl_labels appname
              tier: default

            ingress_labels:
              ingress_appname: ${projectK8sName}
              tier: default
        """.trimIndent()

        val yttTemplatesDirname = "${project.projectDir}/ytt/templates"
        val yttEnvVarsDefaultsFilename = "${project.projectDir}/ytt/envVars/defaults.yml"
        var yttEnvVarsFilename = "${project.projectDir}/ytt/envVars/${env}.yml"
        if( ! File(yttEnvVarsFilename).exists()) {
            yttEnvVarsFilename = "${project.projectDir}/ytt/envVars/default.yml"
            println("!!! did not find ./ytt/envVars/${env}.yml !!! taking ./ytt/envVars/default.yml instead")
        }
        val destDirName = "${project.projectDir}/generated"
        val destDirGeneratedDataDirname = "${project.projectDir}/ytt/generated"
        File(destDirName).mkdir()
        val destDirGeneratedData = File(destDirGeneratedDataDirname)
        if (!destDirGeneratedData.mkdir()) {
            destDirGeneratedData.listFiles { file -> file.isFile() && file.name.matches(Regex("^.*\\.ya?ml$")) }.forEach { println("wiped: " + "ytt/generated/${it.name}"); it.delete() }
        }
        val operatorsDirName = "${project.projectDir}/ytt/operators"
        File(operatorsDirName).mkdir()

        val yttDataValuesFilename = "${destDirGeneratedDataDirname}/${archivesBaseName}-DataValues.yml"
        File(yttDataValuesFilename).writeText(dataValues)

        var yttCmd = listOf("ytt", "-f", yttEnvVarsDefaultsFilename, "-f", yttEnvVarsFilename, "-f", destDirGeneratedDataDirname, "-f", yttTemplatesDirname, "-f", operatorsDirName , "--output-directory", destDirName)

        println(yttCmd.map { it.replace(Regex("^${project.projectDir}"), ".") }.joinToString(" "))
        project.exec {
            commandLine(yttCmd)
        }
    }
}

