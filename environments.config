// will be read by gradle's buildfiles/buildEnv.gradle
// security sensitive values like in password = project.getSecuritySensitiveProperty('cfPezPassword', '<password>')
// will be read from gradle environment (e.g. properties file ~/.gradle/gradle.properties)
environments {
    dev {
        git {
            //origin = "git@gitlab.com:hoffi_minimal/projectemplate.git"
            origin = "hoffmd9@192.168.0.2:DBs/git/minimal/projectemplate"
            remote = "origin"
            credentials = "hoffmd9"
        }
        artifactory {
            url = "http://192.168.0.2:8081/artifactory"
            user = project.getSecuritySensitiveProperty('defaultAdminUser', 'username for artifactory local')
            pass = project.getSecuritySensitiveProperty('defaultAdminPass', 'password for artifactory local')
        }
        jenkins {
            url = "http://localhost:8095/"
            folder = "${project.ext.baseName}"
            user = "admin"
            pass = "admin"
        }
        spring {
            springProfiles = []
            configclient {
                springProfiles = ["custom", "zwei"]
            }
        }
        docker { registry = "dirks-mbp-6:5000" }
        cloudfoundry {
            target = "https://api.local.pcfdev.io"
            baseURL = "local.pcfdev.io"
            organization = "pcfdev-org"
            space = "pcfdev-space"
            trustSelfSignedCerts = true
            username = "admin"
            password = "admin"
        }
        application {
            instances = 1
            memory = 256
            diskQuota = 256
            configclient {
                memory = 768
                diskQuota = 512
            }
        }
        services {
            serviceMap {
                rabbit =    [name:'RabbitMQ',  service:'p-rabbitmq',  plan:'standard']
                redis =     [name:'Redis',     service:'p-redis',     plan:'shared-vm']
                mysql =     [name:'MySql',     service:'p-mysql',     plan:'512mb']
                configserver = [name:'ConfigServer', service:'p-config-server', plan:'standard']
                registry =  [name:'ServiceRegistry', service:'p-service-registry', plan:'standard']
                circuitbreaker = [name:'CircuitBreaker', service:'p-circuit-breaker-dashboard', plan:'standard']
            }
            bindings = []
            configclient {
                bindings = [ 'rabbit', 'configserver' ]
            }
        }
    }

    local {
        spring { springProfiles = ["local"] }
        docker {
            registry = "dirks-mbp-6:5000"
        }
        cloudfoundry {
            target = "https://api.local.pcfdev.io"
            baseURL = "local.pcfdev.io"
            organization = "pcfdev-org"
            space = "pcfdev-space"
            trustSelfSignedCerts = true
            username = "admin"
            password = "admin"
        }
        application {
            instances = 1
            memory = 256
            diskQuota = 256
            configclient {
                memory = 768
                diskQuota = 512
            }
        }
        services {
            serviceMap {
                rabbit =    [name:'RabbitMQ',  service:'p-rabbitmq',  plan:'standard']
                redis =     [name:'Redis',     service:'p-redis',     plan:'shared-vm']
                mysql =     [name:'MySql',     service:'p-mysql',     plan:'512mb']
                configserver = [name:'ConfigServer', service:'p-config-server', plan:'standard']
                registry =  [name:'ServiceRegistry', service:'p-service-registry', plan:'standard']
                circuitbreaker = [name:'CircuitBreaker', service:'p-circuit-breaker-dashboard', plan:'standard']
            }
            bindings = []
            configclient {
                bindings = [ 'rabbit', 'configserver' ]
            }
        }
    }

    docker {
        spring { springProfiles = ["docker"] }
        docker {
            registry = "dirks-mbp-6:5000"
        }
        cloudfoundry {
            target = "https://api.local.pcfdev.io"
            baseURL = "local.pcfdev.io"
            organization = "pcfdev-org"
            space = "pcfdev-space"
            trustSelfSignedCerts = true
            username = "admin"
            password = "admin"
        }
        application {
            instances = 1
            memory = 256
            diskQuota = 256
            configclient {
                memory = 768
                diskQuota = 512
            }
        }
        services {
            serviceMap {
                rabbit =    [name:'RabbitMQ',  service:'p-rabbitmq',  plan:'standard']
                redis =     [name:'Redis',     service:'p-redis',     plan:'shared-vm']
                mysql =     [name:'MySql',     service:'p-mysql',     plan:'512mb']
                configserver = [name:'ConfigServer', service:'p-config-server', plan:'standard']
                registry =  [name:'ServiceRegistry', service:'p-service-registry', plan:'standard']
                circuitbreaker = [name:'CircuitBreaker', service:'p-circuit-breaker-dashboard', plan:'standard']
            }
            bindings = []
            configclient {
                bindings = [ 'rabbit', 'configserver' ]
            }
        }
    }

    thalesDEVTEST {
        git {
            origin = "git@gitlab.thalesdigital.io:paas-pcf/minimal_spring_cloud_services.git"
            remote = "origin"
            credentials = "hoffmd9"
        }
        artifactory {
            url = "http://192.168.0.2:8090/artifactory"
            repoKey = "gradle-dev-local"
            user = "admin"
            pass = "admin"
        }
        jenkins {
            url = "http://localhost:8095/"
            folder = "spring_cloud_stream"
            user = "admin"
            pass = "admin"
        }
        spring { springProfiles = [] }
        docker { registry = "dirks-mbp-6:5000" }
        cloudfoundry {
            target = "https://api.sys.devtest.platform.thalesdigital.io"
            baseURL = "sys.devtest.platform.thalesdigital.io"
            organization = "test-po"
            space = "dev"
            trustSelfSignedCerts = true
            username = "admin"
            password = "admin"
        }
        application {
            instances = 1
            memory = 768
            diskQuota = 512
            configclient {
                memory = 768
                diskQuota = 512
            }
        }
        services {
            serviceMap {
                rabbit =    [name:'testpoRabbitShared',  service:'p-rabbitmq',  plan:'standard']
                redis =     [name:'testpoRedis',     service:'p-redis',     plan:'shared-vm']
                mysql =     [name:'testpoMySql',     service:'p-mysql',     plan:'512mb']
                configserver =   [name:'testpoConfigServer', service:'p-config-server', plan:'standard']
                registry =       [name:'testpoServiceRegistry', service:'p-service-registry', plan:'standard']
                circuitbreaker = [name:'testpoCircuitBreaker', service:'p-circuit-breaker-dashboard', plan:'standard']
            }
            bindings = ['configserver', 'registry', 'circuitbreaker', 'rabbit']
            configclient {
                bindings = [ 'rabbit', 'configserver' ]
            }
        }
    }

    thalesSB {
        git {
            origin = "git@gitlab.thalesdigital.io:paas-pcf/minimal_spring_cloud_services.git"
            remote = "origin"
            credentials = "hoffmd9"
        }
        artifactory {
            url = "http://192.168.0.2:8090/artifactory"
            repoKey = "gradle-dev-local"
            user = "admin"
            pass = "admin"
        }
        jenkins {
            url = "http://localhost:8095/"
            folder = "spring_cloud_stream"
            user = "admin"
            pass = "admin"
        }
        spring { springProfiles = [] }
        docker { registry = "dirks-mbp-6:5000" }
        cloudfoundry {
            target = "https://api.sys.sandbox.platform.thalesdigital.io"
            baseURL = "sys.sandbox.platform.thalesdigital.io"
            organization = "test-po"
            space = "dev"
            trustSelfSignedCerts = true
            username = "admin"
            password = "admin"
        }
        application {
            instances = 1
            memory = 768
            diskQuota = 512
            configclient {
                memory = 768
                diskQuota = 512
            }
        }
        services {
            serviceMap {
                rabbit =    [name:'testpoRabbitShared',  service:'p-rabbitmq',  plan:'standard']
                redis =     [name:'testpoRedis',     service:'p-redis',     plan:'shared-vm']
                mysql =     [name:'testpoMySql',     service:'p-mysql',     plan:'512mb']
                configserver =   [name:'testpoConfigServer', service:'p-config-server', plan:'standard']
                registry =       [name:'testpoServiceRegistry', service:'p-service-registry', plan:'standard']
                circuitbreaker = [name:'testpoCircuitBreaker', service:'p-circuit-breaker-dashboard', plan:'standard']
            }
            configclient {
                bindings = [ 'rabbit', 'configserver' ]
            }
            bindings = ['configserver', 'registry', 'circuitbreaker', 'rabbit']
        }
    }

}
